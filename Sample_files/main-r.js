var reactVersions = {
  "base": "1.325.2",
  "animations": "1.325.2",
  "bi": "1.325.2",
  "components": "1.325.2",
  "core": "1.325.2",
  "editingRendererPlugins": "1.325.2",
  "editingServices": "1.325.2",
  "editorPuk": "1.325.2",
  "fonts": "1.325.2",
  "layout": "1.325.2",
  "logger": "1.325.2",
  "qaAutomation": "1.325.2",
  "skins": "1.325.2",
  "testUtils": "1.325.2",
  "tpa": "1.325.2",
  "utils": "1.325.2",
  "wixSites": "1.325.2",
  "wixappsBuilder": "1.325.2",
  "wixappsClassics": "1.325.2",
  "wixappsCore": "1.325.2"
};

////////////////////////////////////////////////////////////////////////
// This file is generated by grunt-packages DO NOT modify
////////////////////////////////////////////////////////////////////////
var packagesUtil = (function () {
    'use strict';
    /* globals packagesStructure:false */
    var packagesStructure = ["animations","bi","cloud","components","componentsPreviewLayer","core","documentServices","editingRendererPlugins","fonts","layout","logger","qaAutomation","skins","testUtils","tpa","tpaIntegration","utils","wixSites","wixappsBuilder","wixappsClassics","wixappsCore"]

    /**
     * @param {string} str
     * @param {string} seperator
     * @param {string} equalizor
     * @return {Object.<String, String>}
     */
    function reduceStringToObject(str, seperator, equalizor) {
        return (str || '').split(seperator).reduce(function(o, pairString) {
            var pair = pairString.split(equalizor);
            o[pair[0]] = pair[1];
            return o;
        }, {});
    }

    function applyPackagesQueryParam(versionsObject, packagesQueryParam) {
        if (!versionsObject || !packagesQueryParam) return

        function getVersionString(value) {
            if (/^\d+$/.test(value)) {
                return 'http://localhost:' + value
            }
            if (/^[\d\.]+$/.test(value)) {
                return value
            }
        }
        function applyVersion(version, key) {
            if (version && versionsObject[key]) {
                versionsObject[key] = version
            }
        }
        var packages = reduceStringToObject(packagesQueryParam, ',', ':')
        if (packages.all) {
            Object.keys(versionsObject).forEach(applyVersion.bind(null, getVersionString(packages.all)))
        }
        Object.keys(packages).forEach(function(key) {
            applyVersion(getVersionString(packages[key]), key)
        })
    }

    function buildConfig(config, debugQueryParam) {

        //get all debuged resources:
        var debug = (debugQueryParam || '').split(',').filter(Boolean);
        if (debug.indexOf('all') !== -1) {
          var debugableExternals = Object.keys(config.paths).filter(function(path) { return config.paths[path].source; })
          debug = packagesStructure.concat(debugableExternals)
        }

        //config.bundles:
        config.bundles = packagesStructure.filter(function (i) {
            return debug.indexOf(i) === -1;
        });

        //config.packages:
        config.packages = packagesStructure.filter(function(x){return ~debug.indexOf(x)}).map(function (name) {
            return {
                name: name,
                location: 'packages/' + name + '/src/main',
                main: name
            };
        });

        //config.paths:
        Object.keys(config.paths).forEach(function (k) {
            if (typeof config.paths[k] === 'object') {
              config.paths[k] = config.paths[k][~debug.indexOf(k) ? 'source' : 'min']
            }
        });
        config.bundles.forEach(function (i) {
            config.paths[i] = 'packages-bin/' + i + '/' + i + '.min';
        });
    }

    /**
     * @param {string} name
     * @returns {string}
     */
    function getParameterByName(name) {
        name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
        var regex = new RegExp('[\\?&]' + name + '=([^&#]*)'),
            results = regex.exec(location.search);
        return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
    }

    function init(config, versionsObject) {
        var queryParamsObject = reduceStringToObject(location.search.replace(/^\?/, ''), '&', '=');
        applyPackagesQueryParam(versionsObject, queryParamsObject.packages)
        buildConfig(config, queryParamsObject.debug)
    }

    return {
        getParameterByName: getParameterByName,
        init: init
    };
}());
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// requirejs main-r will be generated from this file
////////////////////////////////////////////////////////////////////////
/*eslint enforce-package-access:0*/

// application configuration
function wixRenderSite() {
    'use strict';

    var siteModel = window.siteModel;
    var publicModel = window.publicModel || (siteModel && siteModel.publicModel);
    if (!publicModel) {
        return;
    }

    if (!window.wixBiSession) {
        window.wixBiSession = {};
    }
    else if (window.wixBiSession.mainLoaded) {
        return;
    }
    window.wixBiSession.mainLoaded = Date.now();

    (function prefetchPages() {
        function prefetch(url) {
            var r = new XMLHttpRequest();
            r.open('GET', url, true);
            r.setRequestHeader('Accept', 'application/json');
            r.send();
        }

        try {
            var pageList = publicModel.pageList;
            if (pageList.masterPage) {
                prefetch(pageList.masterPage[0]);
            }
            var hash = location.hash.split('/');
            var pageId = hash[1] || pageList.mainPageId;
            var pages = pageList.pages;
            for (var i = 0; i < pages.length; ++i) {
                if (pages[i].pageId === pageId) {
                    prefetch(pages[i].urls[0]);
                    break;
                }
            }
        } catch (e) {}
    }());

    // this will be removed when NadavL will create the vm for react
    if (!siteModel) {
        siteModel = {
            publicModel: window.publicModel,
            serviceTopology: window.serviceTopology,
            santaBase: window.santaBase,
            configUrls: window.configUrls,
            rendererModel: window.rendererModel,
            componentGlobals: window.componentGlobals,
            serverAndClientRender: window.serverAndClientRender,
            adData: window.adData,
            mobileAdData: window.mobileAdData,
            googleAnalytics: window.googleAnalytics,
            wixData: window.wixData,
            wixBiSession: window.wixBiSession || {}
        };
        siteModel.siteHeader = { id: siteModel.rendererModel.siteId, userId: siteModel.rendererModel.userId }; // required
        siteModel.siteId = siteModel.rendererModel.siteId; // required
        siteModel.viewMode = siteModel.rendererModel.previewMode ? 'preview' : 'site'; // required
        window.siteModel = siteModel;
    }

    // Load a custom lodash build to handle JIT bug in iOS8
    // See: https://github.com/lodash/lodash/issues/799

    function getLodashPath(lodashPaths) {
        var iOS8 = window.navigator.userAgent.search(/OS 8.+like Mac.+AppleWebKit/) !== -1;
        return iOS8 ? lodashPaths.ios8 : lodashPaths.production;
    }

    var staticServerUrl = siteModel.serviceTopology.staticServerUrl;
    var config = {
        baseUrl: '/',
        paths: {
            modernizr: staticServerUrl + 'services/third-party/modernizer/2.6.2/modernizr-2.6.2.min',
            lodash: getLodashPath({production: staticServerUrl + '/services/third-party/lodash/2.4.1/dist/lodash.min', ios8: 'js/vendor/lodash/lodash-custom-ios8.min'}),
            react: {min: 'js/vendor/react-0.12.1.addons.min', source: 'js/vendor/react-0.12.1.addons'},
            zepto: 'js/vendor/zepto.min',
            immutable: 'js/vendor/Immutable.min',//version 2.0.17
            mousetrap: 'js/vendor/mousetrap-1.4.6.min',
            swfobject: 'js/vendor/swfobject-2.3.20130521.min',
            TweenMax: {min: staticServerUrl + 'services/third-party/tweenmax/1.15.0/minified/TweenMax.min', source: staticServerUrl + 'services/third-party/tweenmax/1.15.0/uncompressed/TweenMax'},
            TimelineMax: {min: staticServerUrl + 'services/third-party/tweenmax/1.15.0/minified/TweenMax.min', source: staticServerUrl + 'services/third-party/tweenmax/1.15.0/uncompressed/TweenMax'},
            ScrollToPlugin: {min: staticServerUrl + 'services/third-party/tweenmax/1.15.0/minified/plugins/ScrollToPlugin.min', source: staticServerUrl + 'services/third-party/tweenmax/1.15.0/uncompressed/plugins/ScrollToPlugin'},
            skins: 'js/skins',
            color: 'lib/color/color',
            Q: 'js/vendor/Q/q',
            jasminetpa: 'js/vendor/jasmine/jasmine',
            jasmineext: 'js/vendor/jasmine/jasmine-ext',
            Bluebird: 'js/vendor/bluebird',
            SoundManager: 'js/vendor/soundmanager2/soundmanager2-nodebug-jsmin',
            jjv: 'js/vendor/jjv/jjv.min'
        },
        // generated
        packages: null,
        bundles: null
    };

////////////////////////////////////////////////////////////////////////
    /*globals packagesUtil:true*/
// configure packages
    packagesUtil.init(config, window.reactVersions);
////////////////////////////////////////////////////////////////////////

    config.baseUrl = (function () {
        function getBaseVersion() {
            return window.reactVersions ?
                window.reactVersions.base :
                packagesUtil.getParameterByName('baseVersion');
        }

        function getFullBaseUrl(baseVersion) {
            return baseVersion.indexOf('http') === 0 ?
                baseVersion + '/' :
                staticServerUrl + 'services/santa/' + baseVersion + '/';
        }

        var baseVersion = getBaseVersion();
        return baseVersion ? getFullBaseUrl(baseVersion) : config.baseUrl;
    }());

    // TODO: fix the react source issue
    if (!siteModel.santaBase) {
        siteModel.santaBase = config.baseUrl;
    }

    requirejs.config({
        //By default load any module IDs from js/lib
        baseUrl: config.baseUrl,
        //except, if the module ID starts with "app",
        //load it from the js/app directory. paths
        //config is relative to the baseUrl, and
        //never includes a ".js" extension since
        //the paths config could be for a directory.
        paths: config.paths,
        packages: config.packages,
        bundles: config.bundles,
        shim: {
            'lodash': { exports: '_' },
            'react': { exports: 'React' },
            'zepto': { exports: '$' },
            'color': { exports: 'Color' },
            'Q': { exports: 'Q' },
            'jasminetpa': { exports: 'jasminetpa' },
            'jasmineext': { exports: 'jasmineext' },
            'Bluebird': { exports: 'Bluebird' },
            'SoundManager': {exports: 'soundManager'},
            'jjv': {exports: 'jjv'}
        }
    });

    try {
        var subDomain = document.domain.split('.');
        if (subDomain.length <= 2) {
            subDomain = document.domain;
        } else {
            var beforeLastPart = subDomain[subDomain.length - 2];
            var topLevelDomains = { com: true, org: true, net: true, edu: true, gov: true, mil: true, info: true, co: true, ac: true };
            if (topLevelDomains[beforeLastPart]) {
                subDomain = subDomain[subDomain.length - 3] + '.' + subDomain[subDomain.length - 2] + '.' + subDomain[subDomain.length - 1];
            } else {
                subDomain = subDomain[subDomain.length - 2] + '.' + subDomain[subDomain.length - 1];
            }
        }
        document.domain = subDomain;
    } catch (e) {
    }

    /*
     * Require all needed packages (static + conditional)
     * Then do initial site render (or re-layout if it was rendered by the server)
     */
    function addConditionalDependencies(packages) {
        function isPreview() {
            return packagesUtil.getParameterByName('isEdited') === 'true';
        }

        function isQaAutomation() {
            return packagesUtil.getParameterByName('isqa') === 'true';
        }

        function isTpaIntegration() {
            return packagesUtil.getParameterByName('isTpaIntegration') === 'true';
        }

        function isWixSites() {
            return isWixDomain() || packagesUtil.getParameterByName('iswixsite') === 'true';
        }

        function isWixDomain() {
            return location.hostname === 'www.wix.com';
        }

        if (isPreview()) {
            packages.push('editingServices');
            packages.push('immutable');
        }
        if (isQaAutomation()) {
            packages.push('qaAutomation');
        }
        if (isWixSites()) {
            packages.push('wixSites');
        }
        if (isTpaIntegration()) {
            packages.push('Q');
            packages.push('jasminetpa');
            packages.push('tpaIntegration');
        }
    }

    function getAjaxHandler($) {

        function setCallbacks(xhr, options) {
            xhr.onerror = function (e) {
                if (options.error) {
                    options.error(e);
                }
            };
            xhr.onload = function () {
                if (options.success) {
                    var response = null;
                    try {
                        response = JSON.parse(xhr.responseText);
                    } catch (e) {
                        response = xhr.responseText;
                    }
                    options.success(response);
                }
            };
        }

        function error(msg) {
            try {
                console.error(msg);
            } catch (e) {
            }
        }

        return function ajax(options) {
            var xhr = null;
            try {
                xhr = new XMLHttpRequest();
            } catch (e) {/** xhr not available**/
            }

            /*globals XDomainRequest:true*/
            if (xhr && "withCredentials" in xhr) {
                $.ajax.apply($, arguments);
            } else if (typeof XDomainRequest !== 'undefined') {
                xhr = new XDomainRequest();
                var httpMethod = options.type || 'GET';
                xhr.open(httpMethod, options.url);
                setCallbacks(xhr, options);
                xhr.setRequestHeader = function () {
                }; // ignores request headers in IE (not supported)
                xhr.send();
            } else {
                error('XHR cors not supported, and neither is XDR');
            }
        };
    }

    function load(packages, callback) {
        addConditionalDependencies(packages);
        requirejs(packages, function () {
            window.wixBiSession.packagesLoaded = Date.now();

            function buildFunctionParametersObject(packages, args) {
                return packages.reduce(function (result, p, index) {
                    result[p] = args[index];
                    return result;
                }, {});
            }

            function initConditionalDependencies(packages) {
                if (packages.qaAutomation) {
                    packages.qaAutomation.init(window);
                }
                if (packages.editingServices) {
                    packages.editingServices.init(window);
                }
                if (packages.tpaIntegration) {
                    packages.tpaIntegration.init(window);
                }
            }

            var p = buildFunctionParametersObject(packages, arguments);
            initConditionalDependencies(p);

            var ajaxHandler = getAjaxHandler(p.zepto);
            p.utils.ajaxLibrary.register(ajaxHandler);
            p.utils.ajaxLibrary.enableJsonpHack();

            // Wait for DOM to be ready before accessing it, e.g. getElementById
            p.zepto(function () {
                if (siteModel.wixData) {
                    var siteStructureNode = document.getElementById('SITE_STRUCTURE');
                    siteModel.wixHtmlRaw = siteStructureNode.outerHTML;
                    siteModel.wixAnchors = window.anchors || {};
                    siteStructureNode.parentNode.removeChild(siteStructureNode);
                }

                callback(p, ajaxHandler);
            });
        });
    }

    if (window.clientSideRender) {
        var packages = ['skins', 'components', 'core', 'react', 'utils', 'lodash', 'TweenMax', 'wixappsCore', 'wixappsClassics', 'layout', 'tpa', 'zepto', 'TimelineMax', 'ScrollToPlugin', 'wixappsBuilder', 'fonts', 'cloud', 'animations', 'bi', 'logger', 'color', 'swfobject', 'mousetrap'];
        if (packagesUtil.getParameterByName('ds') === 'true') {
            packages.push('documentServices', 'componentsPreviewLayer');
        }
        load(packages,
            function (p, ajaxHandler) {
                siteModel.requestModel = {
                    userAgent: window.navigator.userAgent,
                    cookie: document.cookie,
                    storage: p.utils.storage(window)
                };
                siteModel.currentUrl = p.utils.urlUtils.parseUrl(location.href);

                p.core.renderer.renderSite(siteModel, ajaxHandler, function (renderedReact) {
                    if (window.rendered) {
                        window.rendered.forceUpdate();
                    } else {
                        window.rendered = p.react.render(renderedReact, document.getElementById("SITE_CONTAINER"));
                        window.onpopstate = window.rendered.onPopState;
                        if (p.documentServices) {
                            window.documentServices = new p.documentServices.Site(window.rendered);
                        }
                    }
                });
            });
    } else {
        load(['layout', 'utils', 'zepto', 'lodash', 'core'],
            function (p, ajaxHandler) {
                var getDomNode = function (id, subId) {
                    return document.getElementById(id + (subId || ''));
                };
                var siteData = new p.core.SiteData(siteModel, ajaxHandler);
                var currentPage = siteData.currentPageInfo.pageId;
                var structuresDesc = {
                    inner: {
                        structure: siteData.pagesData[currentPage].structure,
                        pageId: currentPage,
                        getDomNodeFunc: getDomNode
                    },
                    outer: {
                        structure: siteData.pagesData.masterPage.structure,
                        getDomNodeFunc: getDomNode
                    }
                };
                p.layout.reLayout(structuresDesc, siteData);
            });
    }
}
setTimeout(wixRenderSite, 0);

